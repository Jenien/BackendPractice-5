
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Nasabah
 * 
 */
export type Nasabah = $Result.DefaultSelection<Prisma.$NasabahPayload>
/**
 * Model Akun_bank
 * 
 */
export type Akun_bank = $Result.DefaultSelection<Prisma.$Akun_bankPayload>
/**
 * Model Transaksi
 * 
 */
export type Transaksi = $Result.DefaultSelection<Prisma.$TransaksiPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Nasabahs
 * const nasabahs = await prisma.nasabah.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Nasabahs
   * const nasabahs = await prisma.nasabah.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.nasabah`: Exposes CRUD operations for the **Nasabah** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Nasabahs
    * const nasabahs = await prisma.nasabah.findMany()
    * ```
    */
  get nasabah(): Prisma.NasabahDelegate<ExtArgs>;

  /**
   * `prisma.akun_bank`: Exposes CRUD operations for the **Akun_bank** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Akun_banks
    * const akun_banks = await prisma.akun_bank.findMany()
    * ```
    */
  get akun_bank(): Prisma.Akun_bankDelegate<ExtArgs>;

  /**
   * `prisma.transaksi`: Exposes CRUD operations for the **Transaksi** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Transaksis
    * const transaksis = await prisma.transaksi.findMany()
    * ```
    */
  get transaksi(): Prisma.TransaksiDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.4.2
   * Query Engine version: ac9d7041ed77bcc8a8dbd2ab6616b39013829574
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Nasabah: 'Nasabah',
    Akun_bank: 'Akun_bank',
    Transaksi: 'Transaksi'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'nasabah' | 'akun_bank' | 'transaksi'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Nasabah: {
        payload: Prisma.$NasabahPayload<ExtArgs>
        fields: Prisma.NasabahFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NasabahFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NasabahPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NasabahFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NasabahPayload>
          }
          findFirst: {
            args: Prisma.NasabahFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NasabahPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NasabahFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NasabahPayload>
          }
          findMany: {
            args: Prisma.NasabahFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NasabahPayload>[]
          }
          create: {
            args: Prisma.NasabahCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NasabahPayload>
          }
          createMany: {
            args: Prisma.NasabahCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.NasabahDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NasabahPayload>
          }
          update: {
            args: Prisma.NasabahUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NasabahPayload>
          }
          deleteMany: {
            args: Prisma.NasabahDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.NasabahUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.NasabahUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NasabahPayload>
          }
          aggregate: {
            args: Prisma.NasabahAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateNasabah>
          }
          groupBy: {
            args: Prisma.NasabahGroupByArgs<ExtArgs>,
            result: $Utils.Optional<NasabahGroupByOutputType>[]
          }
          count: {
            args: Prisma.NasabahCountArgs<ExtArgs>,
            result: $Utils.Optional<NasabahCountAggregateOutputType> | number
          }
        }
      }
      Akun_bank: {
        payload: Prisma.$Akun_bankPayload<ExtArgs>
        fields: Prisma.Akun_bankFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Akun_bankFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Akun_bankPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Akun_bankFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Akun_bankPayload>
          }
          findFirst: {
            args: Prisma.Akun_bankFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Akun_bankPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Akun_bankFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Akun_bankPayload>
          }
          findMany: {
            args: Prisma.Akun_bankFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Akun_bankPayload>[]
          }
          create: {
            args: Prisma.Akun_bankCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Akun_bankPayload>
          }
          createMany: {
            args: Prisma.Akun_bankCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.Akun_bankDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Akun_bankPayload>
          }
          update: {
            args: Prisma.Akun_bankUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Akun_bankPayload>
          }
          deleteMany: {
            args: Prisma.Akun_bankDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.Akun_bankUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.Akun_bankUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$Akun_bankPayload>
          }
          aggregate: {
            args: Prisma.Akun_bankAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAkun_bank>
          }
          groupBy: {
            args: Prisma.Akun_bankGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Akun_bankGroupByOutputType>[]
          }
          count: {
            args: Prisma.Akun_bankCountArgs<ExtArgs>,
            result: $Utils.Optional<Akun_bankCountAggregateOutputType> | number
          }
        }
      }
      Transaksi: {
        payload: Prisma.$TransaksiPayload<ExtArgs>
        fields: Prisma.TransaksiFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TransaksiFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransaksiPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TransaksiFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransaksiPayload>
          }
          findFirst: {
            args: Prisma.TransaksiFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransaksiPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TransaksiFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransaksiPayload>
          }
          findMany: {
            args: Prisma.TransaksiFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransaksiPayload>[]
          }
          create: {
            args: Prisma.TransaksiCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransaksiPayload>
          }
          createMany: {
            args: Prisma.TransaksiCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TransaksiDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransaksiPayload>
          }
          update: {
            args: Prisma.TransaksiUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransaksiPayload>
          }
          deleteMany: {
            args: Prisma.TransaksiDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TransaksiUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TransaksiUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TransaksiPayload>
          }
          aggregate: {
            args: Prisma.TransaksiAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTransaksi>
          }
          groupBy: {
            args: Prisma.TransaksiGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TransaksiGroupByOutputType>[]
          }
          count: {
            args: Prisma.TransaksiCountArgs<ExtArgs>,
            result: $Utils.Optional<TransaksiCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type NasabahCountOutputType
   */

  export type NasabahCountOutputType = {
    Akun_bank: number
  }

  export type NasabahCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Akun_bank?: boolean | NasabahCountOutputTypeCountAkun_bankArgs
  }

  // Custom InputTypes

  /**
   * NasabahCountOutputType without action
   */
  export type NasabahCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NasabahCountOutputType
     */
    select?: NasabahCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * NasabahCountOutputType without action
   */
  export type NasabahCountOutputTypeCountAkun_bankArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Akun_bankWhereInput
  }



  /**
   * Count Type Akun_bankCountOutputType
   */

  export type Akun_bankCountOutputType = {
    Transaksi: number
  }

  export type Akun_bankCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Transaksi?: boolean | Akun_bankCountOutputTypeCountTransaksiArgs
  }

  // Custom InputTypes

  /**
   * Akun_bankCountOutputType without action
   */
  export type Akun_bankCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Akun_bankCountOutputType
     */
    select?: Akun_bankCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * Akun_bankCountOutputType without action
   */
  export type Akun_bankCountOutputTypeCountTransaksiArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransaksiWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Nasabah
   */

  export type AggregateNasabah = {
    _count: NasabahCountAggregateOutputType | null
    _avg: NasabahAvgAggregateOutputType | null
    _sum: NasabahSumAggregateOutputType | null
    _min: NasabahMinAggregateOutputType | null
    _max: NasabahMaxAggregateOutputType | null
  }

  export type NasabahAvgAggregateOutputType = {
    NasabahID: number | null
  }

  export type NasabahSumAggregateOutputType = {
    NasabahID: number | null
  }

  export type NasabahMinAggregateOutputType = {
    NasabahID: number | null
    NamaNasabah: string | null
    Email: string | null
    Password: string | null
  }

  export type NasabahMaxAggregateOutputType = {
    NasabahID: number | null
    NamaNasabah: string | null
    Email: string | null
    Password: string | null
  }

  export type NasabahCountAggregateOutputType = {
    NasabahID: number
    NamaNasabah: number
    Email: number
    Password: number
    _all: number
  }


  export type NasabahAvgAggregateInputType = {
    NasabahID?: true
  }

  export type NasabahSumAggregateInputType = {
    NasabahID?: true
  }

  export type NasabahMinAggregateInputType = {
    NasabahID?: true
    NamaNasabah?: true
    Email?: true
    Password?: true
  }

  export type NasabahMaxAggregateInputType = {
    NasabahID?: true
    NamaNasabah?: true
    Email?: true
    Password?: true
  }

  export type NasabahCountAggregateInputType = {
    NasabahID?: true
    NamaNasabah?: true
    Email?: true
    Password?: true
    _all?: true
  }

  export type NasabahAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Nasabah to aggregate.
     */
    where?: NasabahWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Nasabahs to fetch.
     */
    orderBy?: NasabahOrderByWithRelationInput | NasabahOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NasabahWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Nasabahs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Nasabahs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Nasabahs
    **/
    _count?: true | NasabahCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NasabahAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NasabahSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NasabahMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NasabahMaxAggregateInputType
  }

  export type GetNasabahAggregateType<T extends NasabahAggregateArgs> = {
        [P in keyof T & keyof AggregateNasabah]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNasabah[P]>
      : GetScalarType<T[P], AggregateNasabah[P]>
  }




  export type NasabahGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NasabahWhereInput
    orderBy?: NasabahOrderByWithAggregationInput | NasabahOrderByWithAggregationInput[]
    by: NasabahScalarFieldEnum[] | NasabahScalarFieldEnum
    having?: NasabahScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NasabahCountAggregateInputType | true
    _avg?: NasabahAvgAggregateInputType
    _sum?: NasabahSumAggregateInputType
    _min?: NasabahMinAggregateInputType
    _max?: NasabahMaxAggregateInputType
  }

  export type NasabahGroupByOutputType = {
    NasabahID: number
    NamaNasabah: string
    Email: string
    Password: string
    _count: NasabahCountAggregateOutputType | null
    _avg: NasabahAvgAggregateOutputType | null
    _sum: NasabahSumAggregateOutputType | null
    _min: NasabahMinAggregateOutputType | null
    _max: NasabahMaxAggregateOutputType | null
  }

  type GetNasabahGroupByPayload<T extends NasabahGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NasabahGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NasabahGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NasabahGroupByOutputType[P]>
            : GetScalarType<T[P], NasabahGroupByOutputType[P]>
        }
      >
    >


  export type NasabahSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    NasabahID?: boolean
    NamaNasabah?: boolean
    Email?: boolean
    Password?: boolean
    Akun_bank?: boolean | Nasabah$Akun_bankArgs<ExtArgs>
    _count?: boolean | NasabahCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["nasabah"]>

  export type NasabahSelectScalar = {
    NasabahID?: boolean
    NamaNasabah?: boolean
    Email?: boolean
    Password?: boolean
  }

  export type NasabahInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Akun_bank?: boolean | Nasabah$Akun_bankArgs<ExtArgs>
    _count?: boolean | NasabahCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $NasabahPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Nasabah"
    objects: {
      Akun_bank: Prisma.$Akun_bankPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      NasabahID: number
      NamaNasabah: string
      Email: string
      Password: string
    }, ExtArgs["result"]["nasabah"]>
    composites: {}
  }


  type NasabahGetPayload<S extends boolean | null | undefined | NasabahDefaultArgs> = $Result.GetResult<Prisma.$NasabahPayload, S>

  type NasabahCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NasabahFindManyArgs, 'select' | 'include'> & {
      select?: NasabahCountAggregateInputType | true
    }

  export interface NasabahDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Nasabah'], meta: { name: 'Nasabah' } }
    /**
     * Find zero or one Nasabah that matches the filter.
     * @param {NasabahFindUniqueArgs} args - Arguments to find a Nasabah
     * @example
     * // Get one Nasabah
     * const nasabah = await prisma.nasabah.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NasabahFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, NasabahFindUniqueArgs<ExtArgs>>
    ): Prisma__NasabahClient<$Result.GetResult<Prisma.$NasabahPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Nasabah that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {NasabahFindUniqueOrThrowArgs} args - Arguments to find a Nasabah
     * @example
     * // Get one Nasabah
     * const nasabah = await prisma.nasabah.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends NasabahFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NasabahFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__NasabahClient<$Result.GetResult<Prisma.$NasabahPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Nasabah that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NasabahFindFirstArgs} args - Arguments to find a Nasabah
     * @example
     * // Get one Nasabah
     * const nasabah = await prisma.nasabah.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NasabahFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, NasabahFindFirstArgs<ExtArgs>>
    ): Prisma__NasabahClient<$Result.GetResult<Prisma.$NasabahPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Nasabah that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NasabahFindFirstOrThrowArgs} args - Arguments to find a Nasabah
     * @example
     * // Get one Nasabah
     * const nasabah = await prisma.nasabah.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends NasabahFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NasabahFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__NasabahClient<$Result.GetResult<Prisma.$NasabahPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Nasabahs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NasabahFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Nasabahs
     * const nasabahs = await prisma.nasabah.findMany()
     * 
     * // Get first 10 Nasabahs
     * const nasabahs = await prisma.nasabah.findMany({ take: 10 })
     * 
     * // Only select the `NasabahID`
     * const nasabahWithNasabahIDOnly = await prisma.nasabah.findMany({ select: { NasabahID: true } })
     * 
    **/
    findMany<T extends NasabahFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NasabahFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NasabahPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Nasabah.
     * @param {NasabahCreateArgs} args - Arguments to create a Nasabah.
     * @example
     * // Create one Nasabah
     * const Nasabah = await prisma.nasabah.create({
     *   data: {
     *     // ... data to create a Nasabah
     *   }
     * })
     * 
    **/
    create<T extends NasabahCreateArgs<ExtArgs>>(
      args: SelectSubset<T, NasabahCreateArgs<ExtArgs>>
    ): Prisma__NasabahClient<$Result.GetResult<Prisma.$NasabahPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Nasabahs.
     *     @param {NasabahCreateManyArgs} args - Arguments to create many Nasabahs.
     *     @example
     *     // Create many Nasabahs
     *     const nasabah = await prisma.nasabah.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends NasabahCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NasabahCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Nasabah.
     * @param {NasabahDeleteArgs} args - Arguments to delete one Nasabah.
     * @example
     * // Delete one Nasabah
     * const Nasabah = await prisma.nasabah.delete({
     *   where: {
     *     // ... filter to delete one Nasabah
     *   }
     * })
     * 
    **/
    delete<T extends NasabahDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, NasabahDeleteArgs<ExtArgs>>
    ): Prisma__NasabahClient<$Result.GetResult<Prisma.$NasabahPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Nasabah.
     * @param {NasabahUpdateArgs} args - Arguments to update one Nasabah.
     * @example
     * // Update one Nasabah
     * const nasabah = await prisma.nasabah.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NasabahUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, NasabahUpdateArgs<ExtArgs>>
    ): Prisma__NasabahClient<$Result.GetResult<Prisma.$NasabahPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Nasabahs.
     * @param {NasabahDeleteManyArgs} args - Arguments to filter Nasabahs to delete.
     * @example
     * // Delete a few Nasabahs
     * const { count } = await prisma.nasabah.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NasabahDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NasabahDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Nasabahs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NasabahUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Nasabahs
     * const nasabah = await prisma.nasabah.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NasabahUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, NasabahUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Nasabah.
     * @param {NasabahUpsertArgs} args - Arguments to update or create a Nasabah.
     * @example
     * // Update or create a Nasabah
     * const nasabah = await prisma.nasabah.upsert({
     *   create: {
     *     // ... data to create a Nasabah
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Nasabah we want to update
     *   }
     * })
    **/
    upsert<T extends NasabahUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, NasabahUpsertArgs<ExtArgs>>
    ): Prisma__NasabahClient<$Result.GetResult<Prisma.$NasabahPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Nasabahs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NasabahCountArgs} args - Arguments to filter Nasabahs to count.
     * @example
     * // Count the number of Nasabahs
     * const count = await prisma.nasabah.count({
     *   where: {
     *     // ... the filter for the Nasabahs we want to count
     *   }
     * })
    **/
    count<T extends NasabahCountArgs>(
      args?: Subset<T, NasabahCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NasabahCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Nasabah.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NasabahAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NasabahAggregateArgs>(args: Subset<T, NasabahAggregateArgs>): Prisma.PrismaPromise<GetNasabahAggregateType<T>>

    /**
     * Group by Nasabah.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NasabahGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NasabahGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NasabahGroupByArgs['orderBy'] }
        : { orderBy?: NasabahGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NasabahGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNasabahGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Nasabah model
   */
  readonly fields: NasabahFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Nasabah.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NasabahClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Akun_bank<T extends Nasabah$Akun_bankArgs<ExtArgs> = {}>(args?: Subset<T, Nasabah$Akun_bankArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Akun_bankPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Nasabah model
   */ 
  interface NasabahFieldRefs {
    readonly NasabahID: FieldRef<"Nasabah", 'Int'>
    readonly NamaNasabah: FieldRef<"Nasabah", 'String'>
    readonly Email: FieldRef<"Nasabah", 'String'>
    readonly Password: FieldRef<"Nasabah", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Nasabah findUnique
   */
  export type NasabahFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nasabah
     */
    select?: NasabahSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NasabahInclude<ExtArgs> | null
    /**
     * Filter, which Nasabah to fetch.
     */
    where: NasabahWhereUniqueInput
  }


  /**
   * Nasabah findUniqueOrThrow
   */
  export type NasabahFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nasabah
     */
    select?: NasabahSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NasabahInclude<ExtArgs> | null
    /**
     * Filter, which Nasabah to fetch.
     */
    where: NasabahWhereUniqueInput
  }


  /**
   * Nasabah findFirst
   */
  export type NasabahFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nasabah
     */
    select?: NasabahSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NasabahInclude<ExtArgs> | null
    /**
     * Filter, which Nasabah to fetch.
     */
    where?: NasabahWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Nasabahs to fetch.
     */
    orderBy?: NasabahOrderByWithRelationInput | NasabahOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Nasabahs.
     */
    cursor?: NasabahWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Nasabahs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Nasabahs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Nasabahs.
     */
    distinct?: NasabahScalarFieldEnum | NasabahScalarFieldEnum[]
  }


  /**
   * Nasabah findFirstOrThrow
   */
  export type NasabahFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nasabah
     */
    select?: NasabahSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NasabahInclude<ExtArgs> | null
    /**
     * Filter, which Nasabah to fetch.
     */
    where?: NasabahWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Nasabahs to fetch.
     */
    orderBy?: NasabahOrderByWithRelationInput | NasabahOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Nasabahs.
     */
    cursor?: NasabahWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Nasabahs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Nasabahs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Nasabahs.
     */
    distinct?: NasabahScalarFieldEnum | NasabahScalarFieldEnum[]
  }


  /**
   * Nasabah findMany
   */
  export type NasabahFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nasabah
     */
    select?: NasabahSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NasabahInclude<ExtArgs> | null
    /**
     * Filter, which Nasabahs to fetch.
     */
    where?: NasabahWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Nasabahs to fetch.
     */
    orderBy?: NasabahOrderByWithRelationInput | NasabahOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Nasabahs.
     */
    cursor?: NasabahWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Nasabahs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Nasabahs.
     */
    skip?: number
    distinct?: NasabahScalarFieldEnum | NasabahScalarFieldEnum[]
  }


  /**
   * Nasabah create
   */
  export type NasabahCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nasabah
     */
    select?: NasabahSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NasabahInclude<ExtArgs> | null
    /**
     * The data needed to create a Nasabah.
     */
    data: XOR<NasabahCreateInput, NasabahUncheckedCreateInput>
  }


  /**
   * Nasabah createMany
   */
  export type NasabahCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Nasabahs.
     */
    data: NasabahCreateManyInput | NasabahCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Nasabah update
   */
  export type NasabahUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nasabah
     */
    select?: NasabahSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NasabahInclude<ExtArgs> | null
    /**
     * The data needed to update a Nasabah.
     */
    data: XOR<NasabahUpdateInput, NasabahUncheckedUpdateInput>
    /**
     * Choose, which Nasabah to update.
     */
    where: NasabahWhereUniqueInput
  }


  /**
   * Nasabah updateMany
   */
  export type NasabahUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Nasabahs.
     */
    data: XOR<NasabahUpdateManyMutationInput, NasabahUncheckedUpdateManyInput>
    /**
     * Filter which Nasabahs to update
     */
    where?: NasabahWhereInput
  }


  /**
   * Nasabah upsert
   */
  export type NasabahUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nasabah
     */
    select?: NasabahSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NasabahInclude<ExtArgs> | null
    /**
     * The filter to search for the Nasabah to update in case it exists.
     */
    where: NasabahWhereUniqueInput
    /**
     * In case the Nasabah found by the `where` argument doesn't exist, create a new Nasabah with this data.
     */
    create: XOR<NasabahCreateInput, NasabahUncheckedCreateInput>
    /**
     * In case the Nasabah was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NasabahUpdateInput, NasabahUncheckedUpdateInput>
  }


  /**
   * Nasabah delete
   */
  export type NasabahDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nasabah
     */
    select?: NasabahSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NasabahInclude<ExtArgs> | null
    /**
     * Filter which Nasabah to delete.
     */
    where: NasabahWhereUniqueInput
  }


  /**
   * Nasabah deleteMany
   */
  export type NasabahDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Nasabahs to delete
     */
    where?: NasabahWhereInput
  }


  /**
   * Nasabah.Akun_bank
   */
  export type Nasabah$Akun_bankArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Akun_bank
     */
    select?: Akun_bankSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Akun_bankInclude<ExtArgs> | null
    where?: Akun_bankWhereInput
    orderBy?: Akun_bankOrderByWithRelationInput | Akun_bankOrderByWithRelationInput[]
    cursor?: Akun_bankWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Akun_bankScalarFieldEnum | Akun_bankScalarFieldEnum[]
  }


  /**
   * Nasabah without action
   */
  export type NasabahDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nasabah
     */
    select?: NasabahSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NasabahInclude<ExtArgs> | null
  }



  /**
   * Model Akun_bank
   */

  export type AggregateAkun_bank = {
    _count: Akun_bankCountAggregateOutputType | null
    _avg: Akun_bankAvgAggregateOutputType | null
    _sum: Akun_bankSumAggregateOutputType | null
    _min: Akun_bankMinAggregateOutputType | null
    _max: Akun_bankMaxAggregateOutputType | null
  }

  export type Akun_bankAvgAggregateOutputType = {
    AkunID: number | null
    Saldo: number | null
    NasabahID: number | null
  }

  export type Akun_bankSumAggregateOutputType = {
    AkunID: number | null
    Saldo: number | null
    NasabahID: number | null
  }

  export type Akun_bankMinAggregateOutputType = {
    AkunID: number | null
    Saldo: number | null
    NasabahID: number | null
  }

  export type Akun_bankMaxAggregateOutputType = {
    AkunID: number | null
    Saldo: number | null
    NasabahID: number | null
  }

  export type Akun_bankCountAggregateOutputType = {
    AkunID: number
    Saldo: number
    NasabahID: number
    _all: number
  }


  export type Akun_bankAvgAggregateInputType = {
    AkunID?: true
    Saldo?: true
    NasabahID?: true
  }

  export type Akun_bankSumAggregateInputType = {
    AkunID?: true
    Saldo?: true
    NasabahID?: true
  }

  export type Akun_bankMinAggregateInputType = {
    AkunID?: true
    Saldo?: true
    NasabahID?: true
  }

  export type Akun_bankMaxAggregateInputType = {
    AkunID?: true
    Saldo?: true
    NasabahID?: true
  }

  export type Akun_bankCountAggregateInputType = {
    AkunID?: true
    Saldo?: true
    NasabahID?: true
    _all?: true
  }

  export type Akun_bankAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Akun_bank to aggregate.
     */
    where?: Akun_bankWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Akun_banks to fetch.
     */
    orderBy?: Akun_bankOrderByWithRelationInput | Akun_bankOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Akun_bankWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Akun_banks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Akun_banks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Akun_banks
    **/
    _count?: true | Akun_bankCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Akun_bankAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Akun_bankSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Akun_bankMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Akun_bankMaxAggregateInputType
  }

  export type GetAkun_bankAggregateType<T extends Akun_bankAggregateArgs> = {
        [P in keyof T & keyof AggregateAkun_bank]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAkun_bank[P]>
      : GetScalarType<T[P], AggregateAkun_bank[P]>
  }




  export type Akun_bankGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Akun_bankWhereInput
    orderBy?: Akun_bankOrderByWithAggregationInput | Akun_bankOrderByWithAggregationInput[]
    by: Akun_bankScalarFieldEnum[] | Akun_bankScalarFieldEnum
    having?: Akun_bankScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Akun_bankCountAggregateInputType | true
    _avg?: Akun_bankAvgAggregateInputType
    _sum?: Akun_bankSumAggregateInputType
    _min?: Akun_bankMinAggregateInputType
    _max?: Akun_bankMaxAggregateInputType
  }

  export type Akun_bankGroupByOutputType = {
    AkunID: number
    Saldo: number
    NasabahID: number
    _count: Akun_bankCountAggregateOutputType | null
    _avg: Akun_bankAvgAggregateOutputType | null
    _sum: Akun_bankSumAggregateOutputType | null
    _min: Akun_bankMinAggregateOutputType | null
    _max: Akun_bankMaxAggregateOutputType | null
  }

  type GetAkun_bankGroupByPayload<T extends Akun_bankGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Akun_bankGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Akun_bankGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Akun_bankGroupByOutputType[P]>
            : GetScalarType<T[P], Akun_bankGroupByOutputType[P]>
        }
      >
    >


  export type Akun_bankSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    AkunID?: boolean
    Saldo?: boolean
    NasabahID?: boolean
    Nasabah?: boolean | NasabahDefaultArgs<ExtArgs>
    Transaksi?: boolean | Akun_bank$TransaksiArgs<ExtArgs>
    _count?: boolean | Akun_bankCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["akun_bank"]>

  export type Akun_bankSelectScalar = {
    AkunID?: boolean
    Saldo?: boolean
    NasabahID?: boolean
  }

  export type Akun_bankInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Nasabah?: boolean | NasabahDefaultArgs<ExtArgs>
    Transaksi?: boolean | Akun_bank$TransaksiArgs<ExtArgs>
    _count?: boolean | Akun_bankCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $Akun_bankPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Akun_bank"
    objects: {
      Nasabah: Prisma.$NasabahPayload<ExtArgs>
      Transaksi: Prisma.$TransaksiPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      AkunID: number
      Saldo: number
      NasabahID: number
    }, ExtArgs["result"]["akun_bank"]>
    composites: {}
  }


  type Akun_bankGetPayload<S extends boolean | null | undefined | Akun_bankDefaultArgs> = $Result.GetResult<Prisma.$Akun_bankPayload, S>

  type Akun_bankCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<Akun_bankFindManyArgs, 'select' | 'include'> & {
      select?: Akun_bankCountAggregateInputType | true
    }

  export interface Akun_bankDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Akun_bank'], meta: { name: 'Akun_bank' } }
    /**
     * Find zero or one Akun_bank that matches the filter.
     * @param {Akun_bankFindUniqueArgs} args - Arguments to find a Akun_bank
     * @example
     * // Get one Akun_bank
     * const akun_bank = await prisma.akun_bank.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Akun_bankFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, Akun_bankFindUniqueArgs<ExtArgs>>
    ): Prisma__Akun_bankClient<$Result.GetResult<Prisma.$Akun_bankPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Akun_bank that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {Akun_bankFindUniqueOrThrowArgs} args - Arguments to find a Akun_bank
     * @example
     * // Get one Akun_bank
     * const akun_bank = await prisma.akun_bank.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends Akun_bankFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Akun_bankFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__Akun_bankClient<$Result.GetResult<Prisma.$Akun_bankPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Akun_bank that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Akun_bankFindFirstArgs} args - Arguments to find a Akun_bank
     * @example
     * // Get one Akun_bank
     * const akun_bank = await prisma.akun_bank.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Akun_bankFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, Akun_bankFindFirstArgs<ExtArgs>>
    ): Prisma__Akun_bankClient<$Result.GetResult<Prisma.$Akun_bankPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Akun_bank that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Akun_bankFindFirstOrThrowArgs} args - Arguments to find a Akun_bank
     * @example
     * // Get one Akun_bank
     * const akun_bank = await prisma.akun_bank.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends Akun_bankFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, Akun_bankFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__Akun_bankClient<$Result.GetResult<Prisma.$Akun_bankPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Akun_banks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Akun_bankFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Akun_banks
     * const akun_banks = await prisma.akun_bank.findMany()
     * 
     * // Get first 10 Akun_banks
     * const akun_banks = await prisma.akun_bank.findMany({ take: 10 })
     * 
     * // Only select the `AkunID`
     * const akun_bankWithAkunIDOnly = await prisma.akun_bank.findMany({ select: { AkunID: true } })
     * 
    **/
    findMany<T extends Akun_bankFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Akun_bankFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Akun_bankPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Akun_bank.
     * @param {Akun_bankCreateArgs} args - Arguments to create a Akun_bank.
     * @example
     * // Create one Akun_bank
     * const Akun_bank = await prisma.akun_bank.create({
     *   data: {
     *     // ... data to create a Akun_bank
     *   }
     * })
     * 
    **/
    create<T extends Akun_bankCreateArgs<ExtArgs>>(
      args: SelectSubset<T, Akun_bankCreateArgs<ExtArgs>>
    ): Prisma__Akun_bankClient<$Result.GetResult<Prisma.$Akun_bankPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Akun_banks.
     *     @param {Akun_bankCreateManyArgs} args - Arguments to create many Akun_banks.
     *     @example
     *     // Create many Akun_banks
     *     const akun_bank = await prisma.akun_bank.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends Akun_bankCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Akun_bankCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Akun_bank.
     * @param {Akun_bankDeleteArgs} args - Arguments to delete one Akun_bank.
     * @example
     * // Delete one Akun_bank
     * const Akun_bank = await prisma.akun_bank.delete({
     *   where: {
     *     // ... filter to delete one Akun_bank
     *   }
     * })
     * 
    **/
    delete<T extends Akun_bankDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, Akun_bankDeleteArgs<ExtArgs>>
    ): Prisma__Akun_bankClient<$Result.GetResult<Prisma.$Akun_bankPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Akun_bank.
     * @param {Akun_bankUpdateArgs} args - Arguments to update one Akun_bank.
     * @example
     * // Update one Akun_bank
     * const akun_bank = await prisma.akun_bank.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Akun_bankUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, Akun_bankUpdateArgs<ExtArgs>>
    ): Prisma__Akun_bankClient<$Result.GetResult<Prisma.$Akun_bankPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Akun_banks.
     * @param {Akun_bankDeleteManyArgs} args - Arguments to filter Akun_banks to delete.
     * @example
     * // Delete a few Akun_banks
     * const { count } = await prisma.akun_bank.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Akun_bankDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, Akun_bankDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Akun_banks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Akun_bankUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Akun_banks
     * const akun_bank = await prisma.akun_bank.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Akun_bankUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, Akun_bankUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Akun_bank.
     * @param {Akun_bankUpsertArgs} args - Arguments to update or create a Akun_bank.
     * @example
     * // Update or create a Akun_bank
     * const akun_bank = await prisma.akun_bank.upsert({
     *   create: {
     *     // ... data to create a Akun_bank
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Akun_bank we want to update
     *   }
     * })
    **/
    upsert<T extends Akun_bankUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, Akun_bankUpsertArgs<ExtArgs>>
    ): Prisma__Akun_bankClient<$Result.GetResult<Prisma.$Akun_bankPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Akun_banks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Akun_bankCountArgs} args - Arguments to filter Akun_banks to count.
     * @example
     * // Count the number of Akun_banks
     * const count = await prisma.akun_bank.count({
     *   where: {
     *     // ... the filter for the Akun_banks we want to count
     *   }
     * })
    **/
    count<T extends Akun_bankCountArgs>(
      args?: Subset<T, Akun_bankCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Akun_bankCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Akun_bank.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Akun_bankAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Akun_bankAggregateArgs>(args: Subset<T, Akun_bankAggregateArgs>): Prisma.PrismaPromise<GetAkun_bankAggregateType<T>>

    /**
     * Group by Akun_bank.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Akun_bankGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Akun_bankGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Akun_bankGroupByArgs['orderBy'] }
        : { orderBy?: Akun_bankGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Akun_bankGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAkun_bankGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Akun_bank model
   */
  readonly fields: Akun_bankFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Akun_bank.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Akun_bankClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Nasabah<T extends NasabahDefaultArgs<ExtArgs> = {}>(args?: Subset<T, NasabahDefaultArgs<ExtArgs>>): Prisma__NasabahClient<$Result.GetResult<Prisma.$NasabahPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Transaksi<T extends Akun_bank$TransaksiArgs<ExtArgs> = {}>(args?: Subset<T, Akun_bank$TransaksiArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransaksiPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Akun_bank model
   */ 
  interface Akun_bankFieldRefs {
    readonly AkunID: FieldRef<"Akun_bank", 'Int'>
    readonly Saldo: FieldRef<"Akun_bank", 'Int'>
    readonly NasabahID: FieldRef<"Akun_bank", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Akun_bank findUnique
   */
  export type Akun_bankFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Akun_bank
     */
    select?: Akun_bankSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Akun_bankInclude<ExtArgs> | null
    /**
     * Filter, which Akun_bank to fetch.
     */
    where: Akun_bankWhereUniqueInput
  }


  /**
   * Akun_bank findUniqueOrThrow
   */
  export type Akun_bankFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Akun_bank
     */
    select?: Akun_bankSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Akun_bankInclude<ExtArgs> | null
    /**
     * Filter, which Akun_bank to fetch.
     */
    where: Akun_bankWhereUniqueInput
  }


  /**
   * Akun_bank findFirst
   */
  export type Akun_bankFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Akun_bank
     */
    select?: Akun_bankSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Akun_bankInclude<ExtArgs> | null
    /**
     * Filter, which Akun_bank to fetch.
     */
    where?: Akun_bankWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Akun_banks to fetch.
     */
    orderBy?: Akun_bankOrderByWithRelationInput | Akun_bankOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Akun_banks.
     */
    cursor?: Akun_bankWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Akun_banks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Akun_banks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Akun_banks.
     */
    distinct?: Akun_bankScalarFieldEnum | Akun_bankScalarFieldEnum[]
  }


  /**
   * Akun_bank findFirstOrThrow
   */
  export type Akun_bankFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Akun_bank
     */
    select?: Akun_bankSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Akun_bankInclude<ExtArgs> | null
    /**
     * Filter, which Akun_bank to fetch.
     */
    where?: Akun_bankWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Akun_banks to fetch.
     */
    orderBy?: Akun_bankOrderByWithRelationInput | Akun_bankOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Akun_banks.
     */
    cursor?: Akun_bankWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Akun_banks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Akun_banks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Akun_banks.
     */
    distinct?: Akun_bankScalarFieldEnum | Akun_bankScalarFieldEnum[]
  }


  /**
   * Akun_bank findMany
   */
  export type Akun_bankFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Akun_bank
     */
    select?: Akun_bankSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Akun_bankInclude<ExtArgs> | null
    /**
     * Filter, which Akun_banks to fetch.
     */
    where?: Akun_bankWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Akun_banks to fetch.
     */
    orderBy?: Akun_bankOrderByWithRelationInput | Akun_bankOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Akun_banks.
     */
    cursor?: Akun_bankWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Akun_banks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Akun_banks.
     */
    skip?: number
    distinct?: Akun_bankScalarFieldEnum | Akun_bankScalarFieldEnum[]
  }


  /**
   * Akun_bank create
   */
  export type Akun_bankCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Akun_bank
     */
    select?: Akun_bankSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Akun_bankInclude<ExtArgs> | null
    /**
     * The data needed to create a Akun_bank.
     */
    data: XOR<Akun_bankCreateInput, Akun_bankUncheckedCreateInput>
  }


  /**
   * Akun_bank createMany
   */
  export type Akun_bankCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Akun_banks.
     */
    data: Akun_bankCreateManyInput | Akun_bankCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Akun_bank update
   */
  export type Akun_bankUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Akun_bank
     */
    select?: Akun_bankSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Akun_bankInclude<ExtArgs> | null
    /**
     * The data needed to update a Akun_bank.
     */
    data: XOR<Akun_bankUpdateInput, Akun_bankUncheckedUpdateInput>
    /**
     * Choose, which Akun_bank to update.
     */
    where: Akun_bankWhereUniqueInput
  }


  /**
   * Akun_bank updateMany
   */
  export type Akun_bankUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Akun_banks.
     */
    data: XOR<Akun_bankUpdateManyMutationInput, Akun_bankUncheckedUpdateManyInput>
    /**
     * Filter which Akun_banks to update
     */
    where?: Akun_bankWhereInput
  }


  /**
   * Akun_bank upsert
   */
  export type Akun_bankUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Akun_bank
     */
    select?: Akun_bankSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Akun_bankInclude<ExtArgs> | null
    /**
     * The filter to search for the Akun_bank to update in case it exists.
     */
    where: Akun_bankWhereUniqueInput
    /**
     * In case the Akun_bank found by the `where` argument doesn't exist, create a new Akun_bank with this data.
     */
    create: XOR<Akun_bankCreateInput, Akun_bankUncheckedCreateInput>
    /**
     * In case the Akun_bank was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Akun_bankUpdateInput, Akun_bankUncheckedUpdateInput>
  }


  /**
   * Akun_bank delete
   */
  export type Akun_bankDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Akun_bank
     */
    select?: Akun_bankSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Akun_bankInclude<ExtArgs> | null
    /**
     * Filter which Akun_bank to delete.
     */
    where: Akun_bankWhereUniqueInput
  }


  /**
   * Akun_bank deleteMany
   */
  export type Akun_bankDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Akun_banks to delete
     */
    where?: Akun_bankWhereInput
  }


  /**
   * Akun_bank.Transaksi
   */
  export type Akun_bank$TransaksiArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaksi
     */
    select?: TransaksiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransaksiInclude<ExtArgs> | null
    where?: TransaksiWhereInput
    orderBy?: TransaksiOrderByWithRelationInput | TransaksiOrderByWithRelationInput[]
    cursor?: TransaksiWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransaksiScalarFieldEnum | TransaksiScalarFieldEnum[]
  }


  /**
   * Akun_bank without action
   */
  export type Akun_bankDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Akun_bank
     */
    select?: Akun_bankSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: Akun_bankInclude<ExtArgs> | null
  }



  /**
   * Model Transaksi
   */

  export type AggregateTransaksi = {
    _count: TransaksiCountAggregateOutputType | null
    _avg: TransaksiAvgAggregateOutputType | null
    _sum: TransaksiSumAggregateOutputType | null
    _min: TransaksiMinAggregateOutputType | null
    _max: TransaksiMaxAggregateOutputType | null
  }

  export type TransaksiAvgAggregateOutputType = {
    TransaksiID: number | null
    Jumlah: number | null
    AkunID: number | null
  }

  export type TransaksiSumAggregateOutputType = {
    TransaksiID: number | null
    Jumlah: number | null
    AkunID: number | null
  }

  export type TransaksiMinAggregateOutputType = {
    TransaksiID: number | null
    JenisTransaksi: string | null
    Jumlah: number | null
    AkunID: number | null
  }

  export type TransaksiMaxAggregateOutputType = {
    TransaksiID: number | null
    JenisTransaksi: string | null
    Jumlah: number | null
    AkunID: number | null
  }

  export type TransaksiCountAggregateOutputType = {
    TransaksiID: number
    JenisTransaksi: number
    Jumlah: number
    AkunID: number
    _all: number
  }


  export type TransaksiAvgAggregateInputType = {
    TransaksiID?: true
    Jumlah?: true
    AkunID?: true
  }

  export type TransaksiSumAggregateInputType = {
    TransaksiID?: true
    Jumlah?: true
    AkunID?: true
  }

  export type TransaksiMinAggregateInputType = {
    TransaksiID?: true
    JenisTransaksi?: true
    Jumlah?: true
    AkunID?: true
  }

  export type TransaksiMaxAggregateInputType = {
    TransaksiID?: true
    JenisTransaksi?: true
    Jumlah?: true
    AkunID?: true
  }

  export type TransaksiCountAggregateInputType = {
    TransaksiID?: true
    JenisTransaksi?: true
    Jumlah?: true
    AkunID?: true
    _all?: true
  }

  export type TransaksiAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transaksi to aggregate.
     */
    where?: TransaksiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transaksis to fetch.
     */
    orderBy?: TransaksiOrderByWithRelationInput | TransaksiOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TransaksiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transaksis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transaksis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Transaksis
    **/
    _count?: true | TransaksiCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransaksiAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransaksiSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransaksiMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransaksiMaxAggregateInputType
  }

  export type GetTransaksiAggregateType<T extends TransaksiAggregateArgs> = {
        [P in keyof T & keyof AggregateTransaksi]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransaksi[P]>
      : GetScalarType<T[P], AggregateTransaksi[P]>
  }




  export type TransaksiGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransaksiWhereInput
    orderBy?: TransaksiOrderByWithAggregationInput | TransaksiOrderByWithAggregationInput[]
    by: TransaksiScalarFieldEnum[] | TransaksiScalarFieldEnum
    having?: TransaksiScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransaksiCountAggregateInputType | true
    _avg?: TransaksiAvgAggregateInputType
    _sum?: TransaksiSumAggregateInputType
    _min?: TransaksiMinAggregateInputType
    _max?: TransaksiMaxAggregateInputType
  }

  export type TransaksiGroupByOutputType = {
    TransaksiID: number
    JenisTransaksi: string
    Jumlah: number
    AkunID: number
    _count: TransaksiCountAggregateOutputType | null
    _avg: TransaksiAvgAggregateOutputType | null
    _sum: TransaksiSumAggregateOutputType | null
    _min: TransaksiMinAggregateOutputType | null
    _max: TransaksiMaxAggregateOutputType | null
  }

  type GetTransaksiGroupByPayload<T extends TransaksiGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TransaksiGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransaksiGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransaksiGroupByOutputType[P]>
            : GetScalarType<T[P], TransaksiGroupByOutputType[P]>
        }
      >
    >


  export type TransaksiSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    TransaksiID?: boolean
    JenisTransaksi?: boolean
    Jumlah?: boolean
    AkunID?: boolean
    Akun_bank?: boolean | Akun_bankDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transaksi"]>

  export type TransaksiSelectScalar = {
    TransaksiID?: boolean
    JenisTransaksi?: boolean
    Jumlah?: boolean
    AkunID?: boolean
  }

  export type TransaksiInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Akun_bank?: boolean | Akun_bankDefaultArgs<ExtArgs>
  }


  export type $TransaksiPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Transaksi"
    objects: {
      Akun_bank: Prisma.$Akun_bankPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      TransaksiID: number
      JenisTransaksi: string
      Jumlah: number
      AkunID: number
    }, ExtArgs["result"]["transaksi"]>
    composites: {}
  }


  type TransaksiGetPayload<S extends boolean | null | undefined | TransaksiDefaultArgs> = $Result.GetResult<Prisma.$TransaksiPayload, S>

  type TransaksiCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TransaksiFindManyArgs, 'select' | 'include'> & {
      select?: TransaksiCountAggregateInputType | true
    }

  export interface TransaksiDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Transaksi'], meta: { name: 'Transaksi' } }
    /**
     * Find zero or one Transaksi that matches the filter.
     * @param {TransaksiFindUniqueArgs} args - Arguments to find a Transaksi
     * @example
     * // Get one Transaksi
     * const transaksi = await prisma.transaksi.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TransaksiFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TransaksiFindUniqueArgs<ExtArgs>>
    ): Prisma__TransaksiClient<$Result.GetResult<Prisma.$TransaksiPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Transaksi that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TransaksiFindUniqueOrThrowArgs} args - Arguments to find a Transaksi
     * @example
     * // Get one Transaksi
     * const transaksi = await prisma.transaksi.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TransaksiFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TransaksiFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TransaksiClient<$Result.GetResult<Prisma.$TransaksiPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Transaksi that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransaksiFindFirstArgs} args - Arguments to find a Transaksi
     * @example
     * // Get one Transaksi
     * const transaksi = await prisma.transaksi.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TransaksiFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TransaksiFindFirstArgs<ExtArgs>>
    ): Prisma__TransaksiClient<$Result.GetResult<Prisma.$TransaksiPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Transaksi that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransaksiFindFirstOrThrowArgs} args - Arguments to find a Transaksi
     * @example
     * // Get one Transaksi
     * const transaksi = await prisma.transaksi.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TransaksiFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TransaksiFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TransaksiClient<$Result.GetResult<Prisma.$TransaksiPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Transaksis that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransaksiFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transaksis
     * const transaksis = await prisma.transaksi.findMany()
     * 
     * // Get first 10 Transaksis
     * const transaksis = await prisma.transaksi.findMany({ take: 10 })
     * 
     * // Only select the `TransaksiID`
     * const transaksiWithTransaksiIDOnly = await prisma.transaksi.findMany({ select: { TransaksiID: true } })
     * 
    **/
    findMany<T extends TransaksiFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TransaksiFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransaksiPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Transaksi.
     * @param {TransaksiCreateArgs} args - Arguments to create a Transaksi.
     * @example
     * // Create one Transaksi
     * const Transaksi = await prisma.transaksi.create({
     *   data: {
     *     // ... data to create a Transaksi
     *   }
     * })
     * 
    **/
    create<T extends TransaksiCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TransaksiCreateArgs<ExtArgs>>
    ): Prisma__TransaksiClient<$Result.GetResult<Prisma.$TransaksiPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Transaksis.
     *     @param {TransaksiCreateManyArgs} args - Arguments to create many Transaksis.
     *     @example
     *     // Create many Transaksis
     *     const transaksi = await prisma.transaksi.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TransaksiCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TransaksiCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Transaksi.
     * @param {TransaksiDeleteArgs} args - Arguments to delete one Transaksi.
     * @example
     * // Delete one Transaksi
     * const Transaksi = await prisma.transaksi.delete({
     *   where: {
     *     // ... filter to delete one Transaksi
     *   }
     * })
     * 
    **/
    delete<T extends TransaksiDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TransaksiDeleteArgs<ExtArgs>>
    ): Prisma__TransaksiClient<$Result.GetResult<Prisma.$TransaksiPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Transaksi.
     * @param {TransaksiUpdateArgs} args - Arguments to update one Transaksi.
     * @example
     * // Update one Transaksi
     * const transaksi = await prisma.transaksi.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TransaksiUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TransaksiUpdateArgs<ExtArgs>>
    ): Prisma__TransaksiClient<$Result.GetResult<Prisma.$TransaksiPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Transaksis.
     * @param {TransaksiDeleteManyArgs} args - Arguments to filter Transaksis to delete.
     * @example
     * // Delete a few Transaksis
     * const { count } = await prisma.transaksi.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TransaksiDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TransaksiDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transaksis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransaksiUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transaksis
     * const transaksi = await prisma.transaksi.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TransaksiUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TransaksiUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Transaksi.
     * @param {TransaksiUpsertArgs} args - Arguments to update or create a Transaksi.
     * @example
     * // Update or create a Transaksi
     * const transaksi = await prisma.transaksi.upsert({
     *   create: {
     *     // ... data to create a Transaksi
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transaksi we want to update
     *   }
     * })
    **/
    upsert<T extends TransaksiUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TransaksiUpsertArgs<ExtArgs>>
    ): Prisma__TransaksiClient<$Result.GetResult<Prisma.$TransaksiPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Transaksis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransaksiCountArgs} args - Arguments to filter Transaksis to count.
     * @example
     * // Count the number of Transaksis
     * const count = await prisma.transaksi.count({
     *   where: {
     *     // ... the filter for the Transaksis we want to count
     *   }
     * })
    **/
    count<T extends TransaksiCountArgs>(
      args?: Subset<T, TransaksiCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransaksiCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transaksi.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransaksiAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransaksiAggregateArgs>(args: Subset<T, TransaksiAggregateArgs>): Prisma.PrismaPromise<GetTransaksiAggregateType<T>>

    /**
     * Group by Transaksi.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransaksiGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransaksiGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransaksiGroupByArgs['orderBy'] }
        : { orderBy?: TransaksiGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransaksiGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransaksiGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Transaksi model
   */
  readonly fields: TransaksiFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Transaksi.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TransaksiClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Akun_bank<T extends Akun_bankDefaultArgs<ExtArgs> = {}>(args?: Subset<T, Akun_bankDefaultArgs<ExtArgs>>): Prisma__Akun_bankClient<$Result.GetResult<Prisma.$Akun_bankPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Transaksi model
   */ 
  interface TransaksiFieldRefs {
    readonly TransaksiID: FieldRef<"Transaksi", 'Int'>
    readonly JenisTransaksi: FieldRef<"Transaksi", 'String'>
    readonly Jumlah: FieldRef<"Transaksi", 'Int'>
    readonly AkunID: FieldRef<"Transaksi", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Transaksi findUnique
   */
  export type TransaksiFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaksi
     */
    select?: TransaksiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransaksiInclude<ExtArgs> | null
    /**
     * Filter, which Transaksi to fetch.
     */
    where: TransaksiWhereUniqueInput
  }


  /**
   * Transaksi findUniqueOrThrow
   */
  export type TransaksiFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaksi
     */
    select?: TransaksiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransaksiInclude<ExtArgs> | null
    /**
     * Filter, which Transaksi to fetch.
     */
    where: TransaksiWhereUniqueInput
  }


  /**
   * Transaksi findFirst
   */
  export type TransaksiFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaksi
     */
    select?: TransaksiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransaksiInclude<ExtArgs> | null
    /**
     * Filter, which Transaksi to fetch.
     */
    where?: TransaksiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transaksis to fetch.
     */
    orderBy?: TransaksiOrderByWithRelationInput | TransaksiOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transaksis.
     */
    cursor?: TransaksiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transaksis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transaksis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transaksis.
     */
    distinct?: TransaksiScalarFieldEnum | TransaksiScalarFieldEnum[]
  }


  /**
   * Transaksi findFirstOrThrow
   */
  export type TransaksiFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaksi
     */
    select?: TransaksiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransaksiInclude<ExtArgs> | null
    /**
     * Filter, which Transaksi to fetch.
     */
    where?: TransaksiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transaksis to fetch.
     */
    orderBy?: TransaksiOrderByWithRelationInput | TransaksiOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transaksis.
     */
    cursor?: TransaksiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transaksis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transaksis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transaksis.
     */
    distinct?: TransaksiScalarFieldEnum | TransaksiScalarFieldEnum[]
  }


  /**
   * Transaksi findMany
   */
  export type TransaksiFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaksi
     */
    select?: TransaksiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransaksiInclude<ExtArgs> | null
    /**
     * Filter, which Transaksis to fetch.
     */
    where?: TransaksiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transaksis to fetch.
     */
    orderBy?: TransaksiOrderByWithRelationInput | TransaksiOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Transaksis.
     */
    cursor?: TransaksiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transaksis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transaksis.
     */
    skip?: number
    distinct?: TransaksiScalarFieldEnum | TransaksiScalarFieldEnum[]
  }


  /**
   * Transaksi create
   */
  export type TransaksiCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaksi
     */
    select?: TransaksiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransaksiInclude<ExtArgs> | null
    /**
     * The data needed to create a Transaksi.
     */
    data: XOR<TransaksiCreateInput, TransaksiUncheckedCreateInput>
  }


  /**
   * Transaksi createMany
   */
  export type TransaksiCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Transaksis.
     */
    data: TransaksiCreateManyInput | TransaksiCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Transaksi update
   */
  export type TransaksiUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaksi
     */
    select?: TransaksiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransaksiInclude<ExtArgs> | null
    /**
     * The data needed to update a Transaksi.
     */
    data: XOR<TransaksiUpdateInput, TransaksiUncheckedUpdateInput>
    /**
     * Choose, which Transaksi to update.
     */
    where: TransaksiWhereUniqueInput
  }


  /**
   * Transaksi updateMany
   */
  export type TransaksiUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Transaksis.
     */
    data: XOR<TransaksiUpdateManyMutationInput, TransaksiUncheckedUpdateManyInput>
    /**
     * Filter which Transaksis to update
     */
    where?: TransaksiWhereInput
  }


  /**
   * Transaksi upsert
   */
  export type TransaksiUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaksi
     */
    select?: TransaksiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransaksiInclude<ExtArgs> | null
    /**
     * The filter to search for the Transaksi to update in case it exists.
     */
    where: TransaksiWhereUniqueInput
    /**
     * In case the Transaksi found by the `where` argument doesn't exist, create a new Transaksi with this data.
     */
    create: XOR<TransaksiCreateInput, TransaksiUncheckedCreateInput>
    /**
     * In case the Transaksi was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TransaksiUpdateInput, TransaksiUncheckedUpdateInput>
  }


  /**
   * Transaksi delete
   */
  export type TransaksiDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaksi
     */
    select?: TransaksiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransaksiInclude<ExtArgs> | null
    /**
     * Filter which Transaksi to delete.
     */
    where: TransaksiWhereUniqueInput
  }


  /**
   * Transaksi deleteMany
   */
  export type TransaksiDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transaksis to delete
     */
    where?: TransaksiWhereInput
  }


  /**
   * Transaksi without action
   */
  export type TransaksiDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaksi
     */
    select?: TransaksiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TransaksiInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const NasabahScalarFieldEnum: {
    NasabahID: 'NasabahID',
    NamaNasabah: 'NamaNasabah',
    Email: 'Email',
    Password: 'Password'
  };

  export type NasabahScalarFieldEnum = (typeof NasabahScalarFieldEnum)[keyof typeof NasabahScalarFieldEnum]


  export const Akun_bankScalarFieldEnum: {
    AkunID: 'AkunID',
    Saldo: 'Saldo',
    NasabahID: 'NasabahID'
  };

  export type Akun_bankScalarFieldEnum = (typeof Akun_bankScalarFieldEnum)[keyof typeof Akun_bankScalarFieldEnum]


  export const TransaksiScalarFieldEnum: {
    TransaksiID: 'TransaksiID',
    JenisTransaksi: 'JenisTransaksi',
    Jumlah: 'Jumlah',
    AkunID: 'AkunID'
  };

  export type TransaksiScalarFieldEnum = (typeof TransaksiScalarFieldEnum)[keyof typeof TransaksiScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type NasabahWhereInput = {
    AND?: NasabahWhereInput | NasabahWhereInput[]
    OR?: NasabahWhereInput[]
    NOT?: NasabahWhereInput | NasabahWhereInput[]
    NasabahID?: IntFilter<"Nasabah"> | number
    NamaNasabah?: StringFilter<"Nasabah"> | string
    Email?: StringFilter<"Nasabah"> | string
    Password?: StringFilter<"Nasabah"> | string
    Akun_bank?: Akun_bankListRelationFilter
  }

  export type NasabahOrderByWithRelationInput = {
    NasabahID?: SortOrder
    NamaNasabah?: SortOrder
    Email?: SortOrder
    Password?: SortOrder
    Akun_bank?: Akun_bankOrderByRelationAggregateInput
  }

  export type NasabahWhereUniqueInput = Prisma.AtLeast<{
    NasabahID?: number
    Email?: string
    AND?: NasabahWhereInput | NasabahWhereInput[]
    OR?: NasabahWhereInput[]
    NOT?: NasabahWhereInput | NasabahWhereInput[]
    NamaNasabah?: StringFilter<"Nasabah"> | string
    Password?: StringFilter<"Nasabah"> | string
    Akun_bank?: Akun_bankListRelationFilter
  }, "NasabahID" | "Email">

  export type NasabahOrderByWithAggregationInput = {
    NasabahID?: SortOrder
    NamaNasabah?: SortOrder
    Email?: SortOrder
    Password?: SortOrder
    _count?: NasabahCountOrderByAggregateInput
    _avg?: NasabahAvgOrderByAggregateInput
    _max?: NasabahMaxOrderByAggregateInput
    _min?: NasabahMinOrderByAggregateInput
    _sum?: NasabahSumOrderByAggregateInput
  }

  export type NasabahScalarWhereWithAggregatesInput = {
    AND?: NasabahScalarWhereWithAggregatesInput | NasabahScalarWhereWithAggregatesInput[]
    OR?: NasabahScalarWhereWithAggregatesInput[]
    NOT?: NasabahScalarWhereWithAggregatesInput | NasabahScalarWhereWithAggregatesInput[]
    NasabahID?: IntWithAggregatesFilter<"Nasabah"> | number
    NamaNasabah?: StringWithAggregatesFilter<"Nasabah"> | string
    Email?: StringWithAggregatesFilter<"Nasabah"> | string
    Password?: StringWithAggregatesFilter<"Nasabah"> | string
  }

  export type Akun_bankWhereInput = {
    AND?: Akun_bankWhereInput | Akun_bankWhereInput[]
    OR?: Akun_bankWhereInput[]
    NOT?: Akun_bankWhereInput | Akun_bankWhereInput[]
    AkunID?: IntFilter<"Akun_bank"> | number
    Saldo?: IntFilter<"Akun_bank"> | number
    NasabahID?: IntFilter<"Akun_bank"> | number
    Nasabah?: XOR<NasabahRelationFilter, NasabahWhereInput>
    Transaksi?: TransaksiListRelationFilter
  }

  export type Akun_bankOrderByWithRelationInput = {
    AkunID?: SortOrder
    Saldo?: SortOrder
    NasabahID?: SortOrder
    Nasabah?: NasabahOrderByWithRelationInput
    Transaksi?: TransaksiOrderByRelationAggregateInput
  }

  export type Akun_bankWhereUniqueInput = Prisma.AtLeast<{
    AkunID?: number
    AND?: Akun_bankWhereInput | Akun_bankWhereInput[]
    OR?: Akun_bankWhereInput[]
    NOT?: Akun_bankWhereInput | Akun_bankWhereInput[]
    Saldo?: IntFilter<"Akun_bank"> | number
    NasabahID?: IntFilter<"Akun_bank"> | number
    Nasabah?: XOR<NasabahRelationFilter, NasabahWhereInput>
    Transaksi?: TransaksiListRelationFilter
  }, "AkunID">

  export type Akun_bankOrderByWithAggregationInput = {
    AkunID?: SortOrder
    Saldo?: SortOrder
    NasabahID?: SortOrder
    _count?: Akun_bankCountOrderByAggregateInput
    _avg?: Akun_bankAvgOrderByAggregateInput
    _max?: Akun_bankMaxOrderByAggregateInput
    _min?: Akun_bankMinOrderByAggregateInput
    _sum?: Akun_bankSumOrderByAggregateInput
  }

  export type Akun_bankScalarWhereWithAggregatesInput = {
    AND?: Akun_bankScalarWhereWithAggregatesInput | Akun_bankScalarWhereWithAggregatesInput[]
    OR?: Akun_bankScalarWhereWithAggregatesInput[]
    NOT?: Akun_bankScalarWhereWithAggregatesInput | Akun_bankScalarWhereWithAggregatesInput[]
    AkunID?: IntWithAggregatesFilter<"Akun_bank"> | number
    Saldo?: IntWithAggregatesFilter<"Akun_bank"> | number
    NasabahID?: IntWithAggregatesFilter<"Akun_bank"> | number
  }

  export type TransaksiWhereInput = {
    AND?: TransaksiWhereInput | TransaksiWhereInput[]
    OR?: TransaksiWhereInput[]
    NOT?: TransaksiWhereInput | TransaksiWhereInput[]
    TransaksiID?: IntFilter<"Transaksi"> | number
    JenisTransaksi?: StringFilter<"Transaksi"> | string
    Jumlah?: IntFilter<"Transaksi"> | number
    AkunID?: IntFilter<"Transaksi"> | number
    Akun_bank?: XOR<Akun_bankRelationFilter, Akun_bankWhereInput>
  }

  export type TransaksiOrderByWithRelationInput = {
    TransaksiID?: SortOrder
    JenisTransaksi?: SortOrder
    Jumlah?: SortOrder
    AkunID?: SortOrder
    Akun_bank?: Akun_bankOrderByWithRelationInput
  }

  export type TransaksiWhereUniqueInput = Prisma.AtLeast<{
    TransaksiID?: number
    AND?: TransaksiWhereInput | TransaksiWhereInput[]
    OR?: TransaksiWhereInput[]
    NOT?: TransaksiWhereInput | TransaksiWhereInput[]
    JenisTransaksi?: StringFilter<"Transaksi"> | string
    Jumlah?: IntFilter<"Transaksi"> | number
    AkunID?: IntFilter<"Transaksi"> | number
    Akun_bank?: XOR<Akun_bankRelationFilter, Akun_bankWhereInput>
  }, "TransaksiID">

  export type TransaksiOrderByWithAggregationInput = {
    TransaksiID?: SortOrder
    JenisTransaksi?: SortOrder
    Jumlah?: SortOrder
    AkunID?: SortOrder
    _count?: TransaksiCountOrderByAggregateInput
    _avg?: TransaksiAvgOrderByAggregateInput
    _max?: TransaksiMaxOrderByAggregateInput
    _min?: TransaksiMinOrderByAggregateInput
    _sum?: TransaksiSumOrderByAggregateInput
  }

  export type TransaksiScalarWhereWithAggregatesInput = {
    AND?: TransaksiScalarWhereWithAggregatesInput | TransaksiScalarWhereWithAggregatesInput[]
    OR?: TransaksiScalarWhereWithAggregatesInput[]
    NOT?: TransaksiScalarWhereWithAggregatesInput | TransaksiScalarWhereWithAggregatesInput[]
    TransaksiID?: IntWithAggregatesFilter<"Transaksi"> | number
    JenisTransaksi?: StringWithAggregatesFilter<"Transaksi"> | string
    Jumlah?: IntWithAggregatesFilter<"Transaksi"> | number
    AkunID?: IntWithAggregatesFilter<"Transaksi"> | number
  }

  export type NasabahCreateInput = {
    NamaNasabah: string
    Email: string
    Password: string
    Akun_bank?: Akun_bankCreateNestedManyWithoutNasabahInput
  }

  export type NasabahUncheckedCreateInput = {
    NasabahID?: number
    NamaNasabah: string
    Email: string
    Password: string
    Akun_bank?: Akun_bankUncheckedCreateNestedManyWithoutNasabahInput
  }

  export type NasabahUpdateInput = {
    NamaNasabah?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Akun_bank?: Akun_bankUpdateManyWithoutNasabahNestedInput
  }

  export type NasabahUncheckedUpdateInput = {
    NasabahID?: IntFieldUpdateOperationsInput | number
    NamaNasabah?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    Akun_bank?: Akun_bankUncheckedUpdateManyWithoutNasabahNestedInput
  }

  export type NasabahCreateManyInput = {
    NasabahID?: number
    NamaNasabah: string
    Email: string
    Password: string
  }

  export type NasabahUpdateManyMutationInput = {
    NamaNasabah?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
  }

  export type NasabahUncheckedUpdateManyInput = {
    NasabahID?: IntFieldUpdateOperationsInput | number
    NamaNasabah?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
  }

  export type Akun_bankCreateInput = {
    Saldo: number
    Nasabah: NasabahCreateNestedOneWithoutAkun_bankInput
    Transaksi?: TransaksiCreateNestedManyWithoutAkun_bankInput
  }

  export type Akun_bankUncheckedCreateInput = {
    AkunID?: number
    Saldo: number
    NasabahID: number
    Transaksi?: TransaksiUncheckedCreateNestedManyWithoutAkun_bankInput
  }

  export type Akun_bankUpdateInput = {
    Saldo?: IntFieldUpdateOperationsInput | number
    Nasabah?: NasabahUpdateOneRequiredWithoutAkun_bankNestedInput
    Transaksi?: TransaksiUpdateManyWithoutAkun_bankNestedInput
  }

  export type Akun_bankUncheckedUpdateInput = {
    AkunID?: IntFieldUpdateOperationsInput | number
    Saldo?: IntFieldUpdateOperationsInput | number
    NasabahID?: IntFieldUpdateOperationsInput | number
    Transaksi?: TransaksiUncheckedUpdateManyWithoutAkun_bankNestedInput
  }

  export type Akun_bankCreateManyInput = {
    AkunID?: number
    Saldo: number
    NasabahID: number
  }

  export type Akun_bankUpdateManyMutationInput = {
    Saldo?: IntFieldUpdateOperationsInput | number
  }

  export type Akun_bankUncheckedUpdateManyInput = {
    AkunID?: IntFieldUpdateOperationsInput | number
    Saldo?: IntFieldUpdateOperationsInput | number
    NasabahID?: IntFieldUpdateOperationsInput | number
  }

  export type TransaksiCreateInput = {
    JenisTransaksi: string
    Jumlah: number
    Akun_bank: Akun_bankCreateNestedOneWithoutTransaksiInput
  }

  export type TransaksiUncheckedCreateInput = {
    TransaksiID?: number
    JenisTransaksi: string
    Jumlah: number
    AkunID: number
  }

  export type TransaksiUpdateInput = {
    JenisTransaksi?: StringFieldUpdateOperationsInput | string
    Jumlah?: IntFieldUpdateOperationsInput | number
    Akun_bank?: Akun_bankUpdateOneRequiredWithoutTransaksiNestedInput
  }

  export type TransaksiUncheckedUpdateInput = {
    TransaksiID?: IntFieldUpdateOperationsInput | number
    JenisTransaksi?: StringFieldUpdateOperationsInput | string
    Jumlah?: IntFieldUpdateOperationsInput | number
    AkunID?: IntFieldUpdateOperationsInput | number
  }

  export type TransaksiCreateManyInput = {
    TransaksiID?: number
    JenisTransaksi: string
    Jumlah: number
    AkunID: number
  }

  export type TransaksiUpdateManyMutationInput = {
    JenisTransaksi?: StringFieldUpdateOperationsInput | string
    Jumlah?: IntFieldUpdateOperationsInput | number
  }

  export type TransaksiUncheckedUpdateManyInput = {
    TransaksiID?: IntFieldUpdateOperationsInput | number
    JenisTransaksi?: StringFieldUpdateOperationsInput | string
    Jumlah?: IntFieldUpdateOperationsInput | number
    AkunID?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type Akun_bankListRelationFilter = {
    every?: Akun_bankWhereInput
    some?: Akun_bankWhereInput
    none?: Akun_bankWhereInput
  }

  export type Akun_bankOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NasabahCountOrderByAggregateInput = {
    NasabahID?: SortOrder
    NamaNasabah?: SortOrder
    Email?: SortOrder
    Password?: SortOrder
  }

  export type NasabahAvgOrderByAggregateInput = {
    NasabahID?: SortOrder
  }

  export type NasabahMaxOrderByAggregateInput = {
    NasabahID?: SortOrder
    NamaNasabah?: SortOrder
    Email?: SortOrder
    Password?: SortOrder
  }

  export type NasabahMinOrderByAggregateInput = {
    NasabahID?: SortOrder
    NamaNasabah?: SortOrder
    Email?: SortOrder
    Password?: SortOrder
  }

  export type NasabahSumOrderByAggregateInput = {
    NasabahID?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NasabahRelationFilter = {
    is?: NasabahWhereInput
    isNot?: NasabahWhereInput
  }

  export type TransaksiListRelationFilter = {
    every?: TransaksiWhereInput
    some?: TransaksiWhereInput
    none?: TransaksiWhereInput
  }

  export type TransaksiOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type Akun_bankCountOrderByAggregateInput = {
    AkunID?: SortOrder
    Saldo?: SortOrder
    NasabahID?: SortOrder
  }

  export type Akun_bankAvgOrderByAggregateInput = {
    AkunID?: SortOrder
    Saldo?: SortOrder
    NasabahID?: SortOrder
  }

  export type Akun_bankMaxOrderByAggregateInput = {
    AkunID?: SortOrder
    Saldo?: SortOrder
    NasabahID?: SortOrder
  }

  export type Akun_bankMinOrderByAggregateInput = {
    AkunID?: SortOrder
    Saldo?: SortOrder
    NasabahID?: SortOrder
  }

  export type Akun_bankSumOrderByAggregateInput = {
    AkunID?: SortOrder
    Saldo?: SortOrder
    NasabahID?: SortOrder
  }

  export type Akun_bankRelationFilter = {
    is?: Akun_bankWhereInput
    isNot?: Akun_bankWhereInput
  }

  export type TransaksiCountOrderByAggregateInput = {
    TransaksiID?: SortOrder
    JenisTransaksi?: SortOrder
    Jumlah?: SortOrder
    AkunID?: SortOrder
  }

  export type TransaksiAvgOrderByAggregateInput = {
    TransaksiID?: SortOrder
    Jumlah?: SortOrder
    AkunID?: SortOrder
  }

  export type TransaksiMaxOrderByAggregateInput = {
    TransaksiID?: SortOrder
    JenisTransaksi?: SortOrder
    Jumlah?: SortOrder
    AkunID?: SortOrder
  }

  export type TransaksiMinOrderByAggregateInput = {
    TransaksiID?: SortOrder
    JenisTransaksi?: SortOrder
    Jumlah?: SortOrder
    AkunID?: SortOrder
  }

  export type TransaksiSumOrderByAggregateInput = {
    TransaksiID?: SortOrder
    Jumlah?: SortOrder
    AkunID?: SortOrder
  }

  export type Akun_bankCreateNestedManyWithoutNasabahInput = {
    create?: XOR<Akun_bankCreateWithoutNasabahInput, Akun_bankUncheckedCreateWithoutNasabahInput> | Akun_bankCreateWithoutNasabahInput[] | Akun_bankUncheckedCreateWithoutNasabahInput[]
    connectOrCreate?: Akun_bankCreateOrConnectWithoutNasabahInput | Akun_bankCreateOrConnectWithoutNasabahInput[]
    createMany?: Akun_bankCreateManyNasabahInputEnvelope
    connect?: Akun_bankWhereUniqueInput | Akun_bankWhereUniqueInput[]
  }

  export type Akun_bankUncheckedCreateNestedManyWithoutNasabahInput = {
    create?: XOR<Akun_bankCreateWithoutNasabahInput, Akun_bankUncheckedCreateWithoutNasabahInput> | Akun_bankCreateWithoutNasabahInput[] | Akun_bankUncheckedCreateWithoutNasabahInput[]
    connectOrCreate?: Akun_bankCreateOrConnectWithoutNasabahInput | Akun_bankCreateOrConnectWithoutNasabahInput[]
    createMany?: Akun_bankCreateManyNasabahInputEnvelope
    connect?: Akun_bankWhereUniqueInput | Akun_bankWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type Akun_bankUpdateManyWithoutNasabahNestedInput = {
    create?: XOR<Akun_bankCreateWithoutNasabahInput, Akun_bankUncheckedCreateWithoutNasabahInput> | Akun_bankCreateWithoutNasabahInput[] | Akun_bankUncheckedCreateWithoutNasabahInput[]
    connectOrCreate?: Akun_bankCreateOrConnectWithoutNasabahInput | Akun_bankCreateOrConnectWithoutNasabahInput[]
    upsert?: Akun_bankUpsertWithWhereUniqueWithoutNasabahInput | Akun_bankUpsertWithWhereUniqueWithoutNasabahInput[]
    createMany?: Akun_bankCreateManyNasabahInputEnvelope
    set?: Akun_bankWhereUniqueInput | Akun_bankWhereUniqueInput[]
    disconnect?: Akun_bankWhereUniqueInput | Akun_bankWhereUniqueInput[]
    delete?: Akun_bankWhereUniqueInput | Akun_bankWhereUniqueInput[]
    connect?: Akun_bankWhereUniqueInput | Akun_bankWhereUniqueInput[]
    update?: Akun_bankUpdateWithWhereUniqueWithoutNasabahInput | Akun_bankUpdateWithWhereUniqueWithoutNasabahInput[]
    updateMany?: Akun_bankUpdateManyWithWhereWithoutNasabahInput | Akun_bankUpdateManyWithWhereWithoutNasabahInput[]
    deleteMany?: Akun_bankScalarWhereInput | Akun_bankScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type Akun_bankUncheckedUpdateManyWithoutNasabahNestedInput = {
    create?: XOR<Akun_bankCreateWithoutNasabahInput, Akun_bankUncheckedCreateWithoutNasabahInput> | Akun_bankCreateWithoutNasabahInput[] | Akun_bankUncheckedCreateWithoutNasabahInput[]
    connectOrCreate?: Akun_bankCreateOrConnectWithoutNasabahInput | Akun_bankCreateOrConnectWithoutNasabahInput[]
    upsert?: Akun_bankUpsertWithWhereUniqueWithoutNasabahInput | Akun_bankUpsertWithWhereUniqueWithoutNasabahInput[]
    createMany?: Akun_bankCreateManyNasabahInputEnvelope
    set?: Akun_bankWhereUniqueInput | Akun_bankWhereUniqueInput[]
    disconnect?: Akun_bankWhereUniqueInput | Akun_bankWhereUniqueInput[]
    delete?: Akun_bankWhereUniqueInput | Akun_bankWhereUniqueInput[]
    connect?: Akun_bankWhereUniqueInput | Akun_bankWhereUniqueInput[]
    update?: Akun_bankUpdateWithWhereUniqueWithoutNasabahInput | Akun_bankUpdateWithWhereUniqueWithoutNasabahInput[]
    updateMany?: Akun_bankUpdateManyWithWhereWithoutNasabahInput | Akun_bankUpdateManyWithWhereWithoutNasabahInput[]
    deleteMany?: Akun_bankScalarWhereInput | Akun_bankScalarWhereInput[]
  }

  export type NasabahCreateNestedOneWithoutAkun_bankInput = {
    create?: XOR<NasabahCreateWithoutAkun_bankInput, NasabahUncheckedCreateWithoutAkun_bankInput>
    connectOrCreate?: NasabahCreateOrConnectWithoutAkun_bankInput
    connect?: NasabahWhereUniqueInput
  }

  export type TransaksiCreateNestedManyWithoutAkun_bankInput = {
    create?: XOR<TransaksiCreateWithoutAkun_bankInput, TransaksiUncheckedCreateWithoutAkun_bankInput> | TransaksiCreateWithoutAkun_bankInput[] | TransaksiUncheckedCreateWithoutAkun_bankInput[]
    connectOrCreate?: TransaksiCreateOrConnectWithoutAkun_bankInput | TransaksiCreateOrConnectWithoutAkun_bankInput[]
    createMany?: TransaksiCreateManyAkun_bankInputEnvelope
    connect?: TransaksiWhereUniqueInput | TransaksiWhereUniqueInput[]
  }

  export type TransaksiUncheckedCreateNestedManyWithoutAkun_bankInput = {
    create?: XOR<TransaksiCreateWithoutAkun_bankInput, TransaksiUncheckedCreateWithoutAkun_bankInput> | TransaksiCreateWithoutAkun_bankInput[] | TransaksiUncheckedCreateWithoutAkun_bankInput[]
    connectOrCreate?: TransaksiCreateOrConnectWithoutAkun_bankInput | TransaksiCreateOrConnectWithoutAkun_bankInput[]
    createMany?: TransaksiCreateManyAkun_bankInputEnvelope
    connect?: TransaksiWhereUniqueInput | TransaksiWhereUniqueInput[]
  }

  export type NasabahUpdateOneRequiredWithoutAkun_bankNestedInput = {
    create?: XOR<NasabahCreateWithoutAkun_bankInput, NasabahUncheckedCreateWithoutAkun_bankInput>
    connectOrCreate?: NasabahCreateOrConnectWithoutAkun_bankInput
    upsert?: NasabahUpsertWithoutAkun_bankInput
    connect?: NasabahWhereUniqueInput
    update?: XOR<XOR<NasabahUpdateToOneWithWhereWithoutAkun_bankInput, NasabahUpdateWithoutAkun_bankInput>, NasabahUncheckedUpdateWithoutAkun_bankInput>
  }

  export type TransaksiUpdateManyWithoutAkun_bankNestedInput = {
    create?: XOR<TransaksiCreateWithoutAkun_bankInput, TransaksiUncheckedCreateWithoutAkun_bankInput> | TransaksiCreateWithoutAkun_bankInput[] | TransaksiUncheckedCreateWithoutAkun_bankInput[]
    connectOrCreate?: TransaksiCreateOrConnectWithoutAkun_bankInput | TransaksiCreateOrConnectWithoutAkun_bankInput[]
    upsert?: TransaksiUpsertWithWhereUniqueWithoutAkun_bankInput | TransaksiUpsertWithWhereUniqueWithoutAkun_bankInput[]
    createMany?: TransaksiCreateManyAkun_bankInputEnvelope
    set?: TransaksiWhereUniqueInput | TransaksiWhereUniqueInput[]
    disconnect?: TransaksiWhereUniqueInput | TransaksiWhereUniqueInput[]
    delete?: TransaksiWhereUniqueInput | TransaksiWhereUniqueInput[]
    connect?: TransaksiWhereUniqueInput | TransaksiWhereUniqueInput[]
    update?: TransaksiUpdateWithWhereUniqueWithoutAkun_bankInput | TransaksiUpdateWithWhereUniqueWithoutAkun_bankInput[]
    updateMany?: TransaksiUpdateManyWithWhereWithoutAkun_bankInput | TransaksiUpdateManyWithWhereWithoutAkun_bankInput[]
    deleteMany?: TransaksiScalarWhereInput | TransaksiScalarWhereInput[]
  }

  export type TransaksiUncheckedUpdateManyWithoutAkun_bankNestedInput = {
    create?: XOR<TransaksiCreateWithoutAkun_bankInput, TransaksiUncheckedCreateWithoutAkun_bankInput> | TransaksiCreateWithoutAkun_bankInput[] | TransaksiUncheckedCreateWithoutAkun_bankInput[]
    connectOrCreate?: TransaksiCreateOrConnectWithoutAkun_bankInput | TransaksiCreateOrConnectWithoutAkun_bankInput[]
    upsert?: TransaksiUpsertWithWhereUniqueWithoutAkun_bankInput | TransaksiUpsertWithWhereUniqueWithoutAkun_bankInput[]
    createMany?: TransaksiCreateManyAkun_bankInputEnvelope
    set?: TransaksiWhereUniqueInput | TransaksiWhereUniqueInput[]
    disconnect?: TransaksiWhereUniqueInput | TransaksiWhereUniqueInput[]
    delete?: TransaksiWhereUniqueInput | TransaksiWhereUniqueInput[]
    connect?: TransaksiWhereUniqueInput | TransaksiWhereUniqueInput[]
    update?: TransaksiUpdateWithWhereUniqueWithoutAkun_bankInput | TransaksiUpdateWithWhereUniqueWithoutAkun_bankInput[]
    updateMany?: TransaksiUpdateManyWithWhereWithoutAkun_bankInput | TransaksiUpdateManyWithWhereWithoutAkun_bankInput[]
    deleteMany?: TransaksiScalarWhereInput | TransaksiScalarWhereInput[]
  }

  export type Akun_bankCreateNestedOneWithoutTransaksiInput = {
    create?: XOR<Akun_bankCreateWithoutTransaksiInput, Akun_bankUncheckedCreateWithoutTransaksiInput>
    connectOrCreate?: Akun_bankCreateOrConnectWithoutTransaksiInput
    connect?: Akun_bankWhereUniqueInput
  }

  export type Akun_bankUpdateOneRequiredWithoutTransaksiNestedInput = {
    create?: XOR<Akun_bankCreateWithoutTransaksiInput, Akun_bankUncheckedCreateWithoutTransaksiInput>
    connectOrCreate?: Akun_bankCreateOrConnectWithoutTransaksiInput
    upsert?: Akun_bankUpsertWithoutTransaksiInput
    connect?: Akun_bankWhereUniqueInput
    update?: XOR<XOR<Akun_bankUpdateToOneWithWhereWithoutTransaksiInput, Akun_bankUpdateWithoutTransaksiInput>, Akun_bankUncheckedUpdateWithoutTransaksiInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type Akun_bankCreateWithoutNasabahInput = {
    Saldo: number
    Transaksi?: TransaksiCreateNestedManyWithoutAkun_bankInput
  }

  export type Akun_bankUncheckedCreateWithoutNasabahInput = {
    AkunID?: number
    Saldo: number
    Transaksi?: TransaksiUncheckedCreateNestedManyWithoutAkun_bankInput
  }

  export type Akun_bankCreateOrConnectWithoutNasabahInput = {
    where: Akun_bankWhereUniqueInput
    create: XOR<Akun_bankCreateWithoutNasabahInput, Akun_bankUncheckedCreateWithoutNasabahInput>
  }

  export type Akun_bankCreateManyNasabahInputEnvelope = {
    data: Akun_bankCreateManyNasabahInput | Akun_bankCreateManyNasabahInput[]
    skipDuplicates?: boolean
  }

  export type Akun_bankUpsertWithWhereUniqueWithoutNasabahInput = {
    where: Akun_bankWhereUniqueInput
    update: XOR<Akun_bankUpdateWithoutNasabahInput, Akun_bankUncheckedUpdateWithoutNasabahInput>
    create: XOR<Akun_bankCreateWithoutNasabahInput, Akun_bankUncheckedCreateWithoutNasabahInput>
  }

  export type Akun_bankUpdateWithWhereUniqueWithoutNasabahInput = {
    where: Akun_bankWhereUniqueInput
    data: XOR<Akun_bankUpdateWithoutNasabahInput, Akun_bankUncheckedUpdateWithoutNasabahInput>
  }

  export type Akun_bankUpdateManyWithWhereWithoutNasabahInput = {
    where: Akun_bankScalarWhereInput
    data: XOR<Akun_bankUpdateManyMutationInput, Akun_bankUncheckedUpdateManyWithoutNasabahInput>
  }

  export type Akun_bankScalarWhereInput = {
    AND?: Akun_bankScalarWhereInput | Akun_bankScalarWhereInput[]
    OR?: Akun_bankScalarWhereInput[]
    NOT?: Akun_bankScalarWhereInput | Akun_bankScalarWhereInput[]
    AkunID?: IntFilter<"Akun_bank"> | number
    Saldo?: IntFilter<"Akun_bank"> | number
    NasabahID?: IntFilter<"Akun_bank"> | number
  }

  export type NasabahCreateWithoutAkun_bankInput = {
    NamaNasabah: string
    Email: string
    Password: string
  }

  export type NasabahUncheckedCreateWithoutAkun_bankInput = {
    NasabahID?: number
    NamaNasabah: string
    Email: string
    Password: string
  }

  export type NasabahCreateOrConnectWithoutAkun_bankInput = {
    where: NasabahWhereUniqueInput
    create: XOR<NasabahCreateWithoutAkun_bankInput, NasabahUncheckedCreateWithoutAkun_bankInput>
  }

  export type TransaksiCreateWithoutAkun_bankInput = {
    JenisTransaksi: string
    Jumlah: number
  }

  export type TransaksiUncheckedCreateWithoutAkun_bankInput = {
    TransaksiID?: number
    JenisTransaksi: string
    Jumlah: number
  }

  export type TransaksiCreateOrConnectWithoutAkun_bankInput = {
    where: TransaksiWhereUniqueInput
    create: XOR<TransaksiCreateWithoutAkun_bankInput, TransaksiUncheckedCreateWithoutAkun_bankInput>
  }

  export type TransaksiCreateManyAkun_bankInputEnvelope = {
    data: TransaksiCreateManyAkun_bankInput | TransaksiCreateManyAkun_bankInput[]
    skipDuplicates?: boolean
  }

  export type NasabahUpsertWithoutAkun_bankInput = {
    update: XOR<NasabahUpdateWithoutAkun_bankInput, NasabahUncheckedUpdateWithoutAkun_bankInput>
    create: XOR<NasabahCreateWithoutAkun_bankInput, NasabahUncheckedCreateWithoutAkun_bankInput>
    where?: NasabahWhereInput
  }

  export type NasabahUpdateToOneWithWhereWithoutAkun_bankInput = {
    where?: NasabahWhereInput
    data: XOR<NasabahUpdateWithoutAkun_bankInput, NasabahUncheckedUpdateWithoutAkun_bankInput>
  }

  export type NasabahUpdateWithoutAkun_bankInput = {
    NamaNasabah?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
  }

  export type NasabahUncheckedUpdateWithoutAkun_bankInput = {
    NasabahID?: IntFieldUpdateOperationsInput | number
    NamaNasabah?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
  }

  export type TransaksiUpsertWithWhereUniqueWithoutAkun_bankInput = {
    where: TransaksiWhereUniqueInput
    update: XOR<TransaksiUpdateWithoutAkun_bankInput, TransaksiUncheckedUpdateWithoutAkun_bankInput>
    create: XOR<TransaksiCreateWithoutAkun_bankInput, TransaksiUncheckedCreateWithoutAkun_bankInput>
  }

  export type TransaksiUpdateWithWhereUniqueWithoutAkun_bankInput = {
    where: TransaksiWhereUniqueInput
    data: XOR<TransaksiUpdateWithoutAkun_bankInput, TransaksiUncheckedUpdateWithoutAkun_bankInput>
  }

  export type TransaksiUpdateManyWithWhereWithoutAkun_bankInput = {
    where: TransaksiScalarWhereInput
    data: XOR<TransaksiUpdateManyMutationInput, TransaksiUncheckedUpdateManyWithoutAkun_bankInput>
  }

  export type TransaksiScalarWhereInput = {
    AND?: TransaksiScalarWhereInput | TransaksiScalarWhereInput[]
    OR?: TransaksiScalarWhereInput[]
    NOT?: TransaksiScalarWhereInput | TransaksiScalarWhereInput[]
    TransaksiID?: IntFilter<"Transaksi"> | number
    JenisTransaksi?: StringFilter<"Transaksi"> | string
    Jumlah?: IntFilter<"Transaksi"> | number
    AkunID?: IntFilter<"Transaksi"> | number
  }

  export type Akun_bankCreateWithoutTransaksiInput = {
    Saldo: number
    Nasabah: NasabahCreateNestedOneWithoutAkun_bankInput
  }

  export type Akun_bankUncheckedCreateWithoutTransaksiInput = {
    AkunID?: number
    Saldo: number
    NasabahID: number
  }

  export type Akun_bankCreateOrConnectWithoutTransaksiInput = {
    where: Akun_bankWhereUniqueInput
    create: XOR<Akun_bankCreateWithoutTransaksiInput, Akun_bankUncheckedCreateWithoutTransaksiInput>
  }

  export type Akun_bankUpsertWithoutTransaksiInput = {
    update: XOR<Akun_bankUpdateWithoutTransaksiInput, Akun_bankUncheckedUpdateWithoutTransaksiInput>
    create: XOR<Akun_bankCreateWithoutTransaksiInput, Akun_bankUncheckedCreateWithoutTransaksiInput>
    where?: Akun_bankWhereInput
  }

  export type Akun_bankUpdateToOneWithWhereWithoutTransaksiInput = {
    where?: Akun_bankWhereInput
    data: XOR<Akun_bankUpdateWithoutTransaksiInput, Akun_bankUncheckedUpdateWithoutTransaksiInput>
  }

  export type Akun_bankUpdateWithoutTransaksiInput = {
    Saldo?: IntFieldUpdateOperationsInput | number
    Nasabah?: NasabahUpdateOneRequiredWithoutAkun_bankNestedInput
  }

  export type Akun_bankUncheckedUpdateWithoutTransaksiInput = {
    AkunID?: IntFieldUpdateOperationsInput | number
    Saldo?: IntFieldUpdateOperationsInput | number
    NasabahID?: IntFieldUpdateOperationsInput | number
  }

  export type Akun_bankCreateManyNasabahInput = {
    AkunID?: number
    Saldo: number
  }

  export type Akun_bankUpdateWithoutNasabahInput = {
    Saldo?: IntFieldUpdateOperationsInput | number
    Transaksi?: TransaksiUpdateManyWithoutAkun_bankNestedInput
  }

  export type Akun_bankUncheckedUpdateWithoutNasabahInput = {
    AkunID?: IntFieldUpdateOperationsInput | number
    Saldo?: IntFieldUpdateOperationsInput | number
    Transaksi?: TransaksiUncheckedUpdateManyWithoutAkun_bankNestedInput
  }

  export type Akun_bankUncheckedUpdateManyWithoutNasabahInput = {
    AkunID?: IntFieldUpdateOperationsInput | number
    Saldo?: IntFieldUpdateOperationsInput | number
  }

  export type TransaksiCreateManyAkun_bankInput = {
    TransaksiID?: number
    JenisTransaksi: string
    Jumlah: number
  }

  export type TransaksiUpdateWithoutAkun_bankInput = {
    JenisTransaksi?: StringFieldUpdateOperationsInput | string
    Jumlah?: IntFieldUpdateOperationsInput | number
  }

  export type TransaksiUncheckedUpdateWithoutAkun_bankInput = {
    TransaksiID?: IntFieldUpdateOperationsInput | number
    JenisTransaksi?: StringFieldUpdateOperationsInput | string
    Jumlah?: IntFieldUpdateOperationsInput | number
  }

  export type TransaksiUncheckedUpdateManyWithoutAkun_bankInput = {
    TransaksiID?: IntFieldUpdateOperationsInput | number
    JenisTransaksi?: StringFieldUpdateOperationsInput | string
    Jumlah?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use NasabahCountOutputTypeDefaultArgs instead
     */
    export type NasabahCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NasabahCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Akun_bankCountOutputTypeDefaultArgs instead
     */
    export type Akun_bankCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Akun_bankCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NasabahDefaultArgs instead
     */
    export type NasabahArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NasabahDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Akun_bankDefaultArgs instead
     */
    export type Akun_bankArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Akun_bankDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TransaksiDefaultArgs instead
     */
    export type TransaksiArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TransaksiDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}